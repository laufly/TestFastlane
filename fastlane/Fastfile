# Customize this file, documentation can be found here:
# https://docs.fastlane.tools/actions/
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
min_fastlane_version("2.71.1")

default_platform(:android)
# chomp 去掉字符串末尾的\n或\r
ENV["JG_ANDROID_SDK_DIR"] = %x( echo $ANDROID_HOME ).chomp

platform :android do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
    # 跳过文档
    skip_docs
  end

  desc "test upload to cdn"
  lane :testupload do |options|
    video_call_version_string = "1.2.6"
    realPath= Pathname.new(File.dirname(__FILE__)).realpath
     upload_sdk_to_cdn(
           version:video_call_version_string,
           file_path:"#{realPath}/deploy/Wilddog_Video_Call_Android_#{video_call_version_string}_All.zip",
            url:"http://upload.ops.wilddog.cn/android/"
           )
  end

  desc "Runs all the tests"
  lane :test do |options|
      base_version_string = "2.3.4"
      video_call_version_string = "2.4.6"
      #1.将sdk 拷贝到当前路径下然后压缩
      base_sdk_src = "/home/fly/.m2/repository/com/wilddog/client/wilddog-video-base-android/#{base_version_string}/wilddog-video-base-android-#{base_version_string}.aar"
      video_call_sdk_src = "/home/fly/.m2/repository/com/wilddog/client/wilddog-video-call-android/#{video_call_version_string}/wilddog-video-call-android-#{base_version_string}.aar"
      realPath= Pathname.new(File.dirname(__FILE__)).realpath
      dest = "/deploy/Wilddog_Video_Call_Android_#{video_call_version_string}_All"
      puts base_sdk_src
      puts video_call_sdk_src
      puts dest
      #cpPath="cp "+base_sdk_src+" "+dest;
      sh " mkdir -p #{realPath}#{dest}"
      sh "cp -R #{base_sdk_src} #{realPath}#{dest}/wilddog-video-base-android-#{base_version_string}.aar"
      sh "cp -R #{base_sdk_src} #{realPath}#{dest}/wilddog-video-call-android-#{video_call_version_string}.aar"
       zip(path: "#{realPath}/deploy/Wilddog_Video_Call_Android_#{video_call_version_string}_All",
            output_path: "#{realPath}/deploy/Wilddog_Video_Call_Android_#{video_call_version_string}_All.zip")
       #  2. 上传到 cdn
       # upload_sdk_to_cdn(
       #  version:video_call_version_string,
       #  file_path:"#{realPath}/deploy/Wilddog_Video_Call_Android_#{video_call_version_string}_All.zip",
       #   url:"http://upload.ops.wilddog.cn/android/"
       #  )
         3. 更新 wilddog 官网版本号
         # 1. Update official website: Message digest
          wdg_update_official_website(
            version: video_call_version_string,
            project: "Wilddog_Video_Call_Android_#{video_call_version_string}_All", # Wilddog_Video_Call/Room_Android_#{video_call_version_string}_All
            website_appid: "testsync",
            website_email: "578939729@qq.com",
            website_password: "12345678",
            website_project_name: "media",
            file_path: "#{realPath}/deploy/Wilddog_Video_Call_Android_#{video_call_version_string}_All.zip",
            print_rather_than_invoke: false
          )
  end

# 命令实例 fastlane release version:0.0.1 release_notes:测试fastlane tag_notes:增加自定义tag信息

   desc "Submit a new Release Build "
   lane :release do |options|
    version = options[:version]
    release_notes  = options[:release_notes]
    tag_notes = options[:tag_notes]

   # 获取最新的git 代码 默认从master
   git_checkout(branch:"stage-v#{version}")
   git_pull(only_tags:true)
   branch = git_branch
   puts "now branch name is #{branch}"
   # 执行 clean 和 build 命令 上传到本地和中央仓库
   gradle(task:"clean")
   gradle(task:"build")
   gradle(task:"publishToMavenLocal")
   gradle(task:"uploadArchives")
   # 提交
   git_commit_all(message: "Update version to #{version}") # 提交版本号修改
   # 推到分之
   push_to_git_remote( remote: "origin",
                        local_branch: "stage-v#{version}",
                        remote_branch: "stage-v#{version}",
                        force: true,
                        tags: false )
   # 切换到主分支
   git_checkout(branch:"master")
   # 合并分之
   git_merge(branch:"stage-v#{version}")
   # 打tag
   add_git_tag(tag: version, message: "#{tag_notes}") # 设置 tag
   # 推到远程仓库
   push_to_git_remote # 推送到 git 仓库
   end



  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(task: "assembleRelease")
    crashlytics

    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "assembleRelease")
    upload_to_play_store
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end

# More information about multiple platforms in fastlane: https://docs.fastlane.tools/advanced/#control-configuration-by-lane-and-by-platform
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used. No personal data is recorded.
# Learn more at https://docs.fastlane.tools/#metrics
